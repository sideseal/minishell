

/*
char	*read_string_before_quote(char *str, t_list **root, int *status)
{
	int		index;
	char	*return_val;
	char	trg;

	index = 0;
	trg = *str;
	str++;
	while (str[index])
	{
		if (str[index] == trg)
		{
			return_val = ft_substr(str, 0, index);
			if (str[index] == '\"')
			{
				if (double_quote_task(return_val, root, status))
					return (NULL);
			}
			else
			{
				ft_lstadd_back(root, ft_lstnew(return_val, 0));
				ft_lstlast(*root)->is_single_quote = 1;
			}
			return (str + index + 1);
		}
		index++;
	}
	if (str[index] == '\0')
		unexpected_token_end(0);
	return (NULL);
}
*/
/*
void	double_quote_task(char *return_val, t_list **root)
{
	int		index;
	int		index_before;

	index = 0;
	index_before = 0;
	if (!return_val[index])
	{
		ft_lstadd_back(root, ft_lstnew(ft_strdup(""), 0));
		return ;
	}
	while (return_val[index])
	{
		while (return_val[index] && return_val[index] != '$')
			index++;
		ft_lstadd_back(root, ft_lstnew(ft_substr(return_val,
					index_before, index - index_before), 0));
		index_before = index;
		if (return_val[index] && return_val[index] == '$' && (ft_isalpha
				(return_val[index + 1]) || return_val[index + 1] == '_'))
		{
			while (return_val[index] && (ft_isalnum
					(return_val[index + 1]) || return_val[index + 1] == '_'))
				index++;
			index++;
			ft_lstadd_back(root, ft_lstnew(ft_substr(return_val,
						index_before, index - index_before), 0));
			index_before = index;
		}
		else if (!ft_isalpha(return_val[index + 1])
			|| return_val[index + 1] != '_')
		{
			ft_lstadd_back(root, ft_lstnew(ft_substr(return_val, index, 2), 0));
			ft_lstlast(*root)->is_single_quote = 1;
			index += 2;
			index_before = index;
		}
	}
}
*/